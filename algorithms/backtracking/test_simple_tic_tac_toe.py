#!/usr/bin/env python3
"""
Teste simples para verificar se a implementa√ß√£o do Jogo da Velha est√° funcionando.
"""

def test_basic_functionality():
    """Testa funcionalidade b√°sica."""
    try:
        from tic_tac_toe_minimax import TicTacToeBoard, get_best_move
        
        print("‚úì Importa√ß√£o bem-sucedida")
        
        # Testa cria√ß√£o do tabuleiro
        board = TicTacToeBoard(3)
        print("‚úì Tabuleiro criado com sucesso")
        
        # Testa movimento
        board.make_move(0, 0)
        print("‚úì Movimento realizado com sucesso")
        
        # Testa algoritmo minimax
        best_move = get_best_move(board)
        print(f"‚úì Melhor movimento calculado: {best_move}")
        
        print("\nüéâ Todos os testes b√°sicos passaram!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False


def test_game_progression():
    """Testa progress√£o de um jogo simples."""
    try:
        from tic_tac_toe_minimax import TicTacToeBoard, get_best_move
        
        print("\n=== Teste de Progress√£o de Jogo ===")
        
        board = TicTacToeBoard(3)
        print("Tabuleiro inicial:")
        print(board)
        
        # Primeiro movimento
        best_move = get_best_move(board)
        board.make_move(*best_move)
        print(f"\nAp√≥s primeiro movimento {best_move}:")
        print(board)
        
        # Segundo movimento
        best_move = get_best_move(board)
        board.make_move(*best_move)
        print(f"\nAp√≥s segundo movimento {best_move}:")
        print(board)
        
        print("‚úì Progress√£o de jogo funcionando!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na progress√£o: {e}")
        return False


def test_complexity_analysis():
    """Testa an√°lise de complexidade."""
    try:
        from tic_tac_toe_minimax import analyze_minimax_complexity
        
        print("\n=== Teste de An√°lise de Complexidade ===")
        
        for size in [3, 4]:
            analysis = analyze_minimax_complexity(size)
            print(f"Tabuleiro {size}x{size}:")
            print(f"  Posi√ß√µes: {analysis['total_positions']}")
            print(f"  Vi√°vel: {analysis['practical_limit']}")
        
        print("‚úì An√°lise de complexidade funcionando!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise: {e}")
        return False


if __name__ == "__main__":
    print("=== Teste Simples: Jogo da Velha com Minimax ===\n")
    
    tests = [
        ("Funcionalidade B√°sica", test_basic_functionality),
        ("Progress√£o de Jogo", test_game_progression),
        ("An√°lise de Complexidade", test_complexity_analysis)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n--- {test_name} ---")
        if test_func():
            passed += 1
    
    print(f"\n=== Resultado: {passed}/{total} testes passaram ===")
    
    if passed == total:
        print("üéâ Todos os testes passaram! Implementa√ß√£o funcionando corretamente.")
    else:
        print("‚ö†Ô∏è Alguns testes falharam. Verifique a implementa√ß√£o.") 